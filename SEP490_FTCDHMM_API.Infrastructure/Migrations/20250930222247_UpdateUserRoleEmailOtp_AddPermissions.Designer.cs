// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SEP490_FTCDHMM_API.Infrastructure.Data;

#nullable disable

namespace SEP490_FTCDHMM_API.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250930222247_UpdateUserRoleEmailOtp_AddPermissions")]
    partial class UpdateUserRoleEmailOtp_AddPermissions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AppRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00edafe3-b047-5980-d0fa-da10f400c1e5"),
                            IsActive = true,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("8ea665ca-b310-5ac6-c897-ff8b89f9f728"),
                            IsActive = true,
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = new Guid("1d6026ce-0dac-13ea-8b72-95f02b7620a7"),
                            IsActive = true,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.AppRolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("RoleId", "PermissionActionId");

                    b.HasIndex("PermissionActionId");

                    b.ToTable("AppRolePermission", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("00edafe3-b047-5980-d0fa-da10f400c1e5"),
                            PermissionActionId = new Guid("ced5dfe6-7556-6848-28bc-774ca9373d65"),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("00edafe3-b047-5980-d0fa-da10f400c1e5"),
                            PermissionActionId = new Guid("d6f9fd07-aa46-e05b-eb9a-3dbe142ff302"),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("00edafe3-b047-5980-d0fa-da10f400c1e5"),
                            PermissionActionId = new Guid("718dad89-4d50-185d-37e3-841f43d1a787"),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("00edafe3-b047-5980-d0fa-da10f400c1e5"),
                            PermissionActionId = new Guid("bbe1aa5b-b75c-9427-9367-d86ca81437a6"),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("00edafe3-b047-5980-d0fa-da10f400c1e5"),
                            PermissionActionId = new Guid("e5849211-12bb-edfc-75d8-de89ec0ec956"),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("00edafe3-b047-5980-d0fa-da10f400c1e5"),
                            PermissionActionId = new Guid("e7b07d76-ce8e-5b94-f4e3-12de8c7a8382"),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("00edafe3-b047-5980-d0fa-da10f400c1e5"),
                            PermissionActionId = new Guid("3c1f0712-eab0-cd34-b90d-62d1d886fd98"),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("00edafe3-b047-5980-d0fa-da10f400c1e5"),
                            PermissionActionId = new Guid("5dbcfaf8-7006-f8be-cca0-e22622f58ea9"),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = new Guid("8ea665ca-b310-5ac6-c897-ff8b89f9f728"),
                            PermissionActionId = new Guid("ced5dfe6-7556-6848-28bc-774ca9373d65"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("8ea665ca-b310-5ac6-c897-ff8b89f9f728"),
                            PermissionActionId = new Guid("d6f9fd07-aa46-e05b-eb9a-3dbe142ff302"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("8ea665ca-b310-5ac6-c897-ff8b89f9f728"),
                            PermissionActionId = new Guid("718dad89-4d50-185d-37e3-841f43d1a787"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("8ea665ca-b310-5ac6-c897-ff8b89f9f728"),
                            PermissionActionId = new Guid("bbe1aa5b-b75c-9427-9367-d86ca81437a6"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("8ea665ca-b310-5ac6-c897-ff8b89f9f728"),
                            PermissionActionId = new Guid("e5849211-12bb-edfc-75d8-de89ec0ec956"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("8ea665ca-b310-5ac6-c897-ff8b89f9f728"),
                            PermissionActionId = new Guid("e7b07d76-ce8e-5b94-f4e3-12de8c7a8382"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("8ea665ca-b310-5ac6-c897-ff8b89f9f728"),
                            PermissionActionId = new Guid("3c1f0712-eab0-cd34-b90d-62d1d886fd98"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("8ea665ca-b310-5ac6-c897-ff8b89f9f728"),
                            PermissionActionId = new Guid("5dbcfaf8-7006-f8be-cca0-e22622f58ea9"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("1d6026ce-0dac-13ea-8b72-95f02b7620a7"),
                            PermissionActionId = new Guid("ced5dfe6-7556-6848-28bc-774ca9373d65"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("1d6026ce-0dac-13ea-8b72-95f02b7620a7"),
                            PermissionActionId = new Guid("d6f9fd07-aa46-e05b-eb9a-3dbe142ff302"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("1d6026ce-0dac-13ea-8b72-95f02b7620a7"),
                            PermissionActionId = new Guid("718dad89-4d50-185d-37e3-841f43d1a787"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("1d6026ce-0dac-13ea-8b72-95f02b7620a7"),
                            PermissionActionId = new Guid("bbe1aa5b-b75c-9427-9367-d86ca81437a6"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("1d6026ce-0dac-13ea-8b72-95f02b7620a7"),
                            PermissionActionId = new Guid("e5849211-12bb-edfc-75d8-de89ec0ec956"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("1d6026ce-0dac-13ea-8b72-95f02b7620a7"),
                            PermissionActionId = new Guid("e7b07d76-ce8e-5b94-f4e3-12de8c7a8382"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("1d6026ce-0dac-13ea-8b72-95f02b7620a7"),
                            PermissionActionId = new Guid("3c1f0712-eab0-cd34-b90d-62d1d886fd98"),
                            IsActive = false
                        },
                        new
                        {
                            RoleId = new Guid("1d6026ce-0dac-13ea-8b72-95f02b7620a7"),
                            PermissionActionId = new Guid("5dbcfaf8-7006-f8be-cca0-e22622f58ea9"),
                            IsActive = false
                        });
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("'Other'");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUser", (string)null);
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.EmailOtp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailOtp", (string)null);
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.PermissionAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PermissionDomainId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionDomainId");

                    b.ToTable("PermissionAction", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ced5dfe6-7556-6848-28bc-774ca9373d65"),
                            Name = "Create",
                            PermissionDomainId = new Guid("58f211a8-1e64-c797-cb94-34ff7945f590")
                        },
                        new
                        {
                            Id = new Guid("d6f9fd07-aa46-e05b-eb9a-3dbe142ff302"),
                            Name = "View",
                            PermissionDomainId = new Guid("58f211a8-1e64-c797-cb94-34ff7945f590")
                        },
                        new
                        {
                            Id = new Guid("718dad89-4d50-185d-37e3-841f43d1a787"),
                            Name = "Update",
                            PermissionDomainId = new Guid("58f211a8-1e64-c797-cb94-34ff7945f590")
                        },
                        new
                        {
                            Id = new Guid("bbe1aa5b-b75c-9427-9367-d86ca81437a6"),
                            Name = "Delete",
                            PermissionDomainId = new Guid("58f211a8-1e64-c797-cb94-34ff7945f590")
                        },
                        new
                        {
                            Id = new Guid("e5849211-12bb-edfc-75d8-de89ec0ec956"),
                            Name = "Create",
                            PermissionDomainId = new Guid("9e0c2106-2ec3-4a03-2050-7e1aa77b3a3b")
                        },
                        new
                        {
                            Id = new Guid("e7b07d76-ce8e-5b94-f4e3-12de8c7a8382"),
                            Name = "View",
                            PermissionDomainId = new Guid("9e0c2106-2ec3-4a03-2050-7e1aa77b3a3b")
                        },
                        new
                        {
                            Id = new Guid("3c1f0712-eab0-cd34-b90d-62d1d886fd98"),
                            Name = "Update",
                            PermissionDomainId = new Guid("9e0c2106-2ec3-4a03-2050-7e1aa77b3a3b")
                        },
                        new
                        {
                            Id = new Guid("5dbcfaf8-7006-f8be-cca0-e22622f58ea9"),
                            Name = "Delete",
                            PermissionDomainId = new Guid("9e0c2106-2ec3-4a03-2050-7e1aa77b3a3b")
                        });
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.PermissionDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PermissionDomain");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58f211a8-1e64-c797-cb94-34ff7945f590"),
                            Name = "ModeratorManagement"
                        },
                        new
                        {
                            Id = new Guid("9e0c2106-2ec3-4a03-2050-7e1aa77b3a3b"),
                            Name = "CustomerManagement"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SEP490_FTCDHMM_API.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SEP490_FTCDHMM_API.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SEP490_FTCDHMM_API.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SEP490_FTCDHMM_API.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.AppRolePermission", b =>
                {
                    b.HasOne("SEP490_FTCDHMM_API.Domain.Entities.PermissionAction", "PermissionAction")
                        .WithMany("RolePermissionActions")
                        .HasForeignKey("PermissionActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SEP490_FTCDHMM_API.Domain.Entities.AppRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionAction");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("SEP490_FTCDHMM_API.Domain.Entities.AppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.EmailOtp", b =>
                {
                    b.HasOne("SEP490_FTCDHMM_API.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.PermissionAction", b =>
                {
                    b.HasOne("SEP490_FTCDHMM_API.Domain.Entities.PermissionDomain", "PermissionDomain")
                        .WithMany("Actions")
                        .HasForeignKey("PermissionDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionDomain");
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.AppRole", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.PermissionAction", b =>
                {
                    b.Navigation("RolePermissionActions");
                });

            modelBuilder.Entity("SEP490_FTCDHMM_API.Domain.Entities.PermissionDomain", b =>
                {
                    b.Navigation("Actions");
                });
#pragma warning restore 612, 618
        }
    }
}
